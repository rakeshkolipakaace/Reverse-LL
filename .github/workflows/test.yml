# name: DSA Solution Tester

# on:
#   push:
#     paths:
#       - "solutions/**"
#       - "tests/**"
#   pull_request:
#     paths:
#       - "solutions/**"
#       - "tests/**"

# jobs:
#   run-tests:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout Repository
#         uses: actions/checkout@v4
#         with:
#           fetch-depth: 2

#       - name: Find Changed Solution Files
#         id: changed-files
#         run: |
#           # Get all modified/added solution files
#           SOLUTIONS=$(git diff --name-only ${{ github.event.before || 'HEAD~1' }} HEAD | grep '^solutions/')
#           echo "solutions=$SOLUTIONS" >> $GITHUB_OUTPUT
#           echo "Detected solution files: $SOLUTIONS"

#       - name: Verify Implementations
#         run: |
#           for file in ${{ steps.changed-files.outputs.solutions }}; do
#             echo "Checking implementation in $file"
#             if [ ! -s "$file" ]; then
#               echo "::error::Empty solution file: $file"
#               exit 1
#             fi
#             # Generic check for non-comment lines
#             if ! grep -qE '^\s*[^/]' "$file"; then
#               echo "::error::No implementation found in $file"
#               exit 1
#             fi
#           done

#       - name: Detect Language
#         id: detect-language
#         run: |
#           for file in ${{ steps.changed-files.outputs.solutions }}; do
#             case "$file" in
#               *.c) echo "C" >> languages.txt ;;
#               *.cpp) echo "C++" >> languages.txt ;;
#               *.py) echo "Python" >> languages.txt ;;
#               *.java) echo "Java" >> languages.txt ;;
#             esac
#           done
#           LANGUAGES=$(sort -u languages.txt | tr '\n' ' ')
#           echo "languages=$LANGUAGES" >> $GITHUB_OUTPUT
#           echo "Detected languages: $LANGUAGES"

#       - name: Setup Environments
#         run: |
#           sudo apt update
#           echo "${{ steps.detect-language.outputs.languages }}" | grep -q "C" && sudo apt install -y gcc
#           echo "${{ steps.detect-language.outputs.languages }}" | grep -q "C++" && sudo apt install -y g++
#           echo "${{ steps.detect-language.outputs.languages }}" | grep -q "Python" && sudo apt install -y python3
#           echo "${{ steps.detect-language.outputs.languages }}" | grep -q "Java" && sudo apt install -y openjdk-17-jdk-headless

#       - name: Run Tests
#         run: |
#           for lang in ${{ steps.detect-language.outputs.languages }}; do
#             echo "Processing $lang tests..."
#             case "$lang" in
#               C)
#                 gcc solutions/*.c tests/*.c -o test_runner
#                 ./test_runner || echo "C tests failed"
#                 ;;
#               C++)
#                 g++ -std=c++17 solutions/*.cpp tests/*.cpp -o test_runner
#                 ./test_runner || echo "C++ tests failed"
#                 ;;
#               Python)
#                 python3 -m pytest tests/test_*.py -v || echo "Python tests failed"
#                 ;;
#               Java)
#                 javac solutions/*.java tests/*.java -d out
#                 java -cp out TestRunner || echo "Java tests failed"
#                 ;;
#             esac
#           done






name: Run DSA Code Tests

on:
  push:
    paths:
      - "solutions/**"
  pull_request:
    paths:
      - "tests/**"

jobs:
  run-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Detect Changed Files
        id: changed-files
        run: |
          # Get changed files in solutions directory
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD | grep '^solutions/' || echo "")
          
          if [ -z "$CHANGED_FILES" ]; then
            echo "No changes in solutions/ directory. Exiting..."
            exit 1
          fi
          
          echo "CHANGED_FILES=$(echo "$CHANGED_FILES" | tr '\n' ' ')" >> $GITHUB_ENV
          
          # Detect programming languages
          LANGS=""
          for file in $CHANGED_FILES; do
            if [[ "$file" == *.c ]]; then LANGS="${LANGS}C "; fi
            if [[ "$file" == *.cpp ]]; then LANGS="${LANGS}C++ "; fi
            if [[ "$file" == *.py ]]; then LANGS="${LANGS}Python "; fi
            if [[ "$file" == *.java ]]; then LANGS="${LANGS}Java "; fi
          done
          
          echo "LANGUAGES=$(echo "$LANGS" | xargs)" >> $GITHUB_ENV

      - name: Check for Empty Solutions
        run: |
          for file in $CHANGED_FILES; do
            # Check if file contains actual code (simplified)
            if [ $(grep -v '^\s*$\|^\s*\/\/\|^\s*\/\*\|^\s*\*\|^\s*\*\/' "$file" | wc -l) -lt 3 ]; then
              echo "Error: $file appears to be empty or contain only function signatures"
              exit 1
            fi
          done

      - name: Install Dependencies
        run: |
          sudo apt update
          # Install only needed dependencies based on detected languages
          if [[ "$LANGUAGES" == *"C"* ]]; then sudo apt install -y gcc; fi
          if [[ "$LANGUAGES" == *"C++"* ]]; then sudo apt install -y g++; fi
          if [[ "$LANGUAGES" == *"Python"* ]]; then sudo apt install -y python3; fi
          if [[ "$LANGUAGES" == *"Java"* ]]; then sudo apt install -y openjdk-17-jdk-headless; fi

      - name: Run Tests
        run: |
          mkdir -p test_results
          
          # Create symbolic links for solution files
          mkdir -p temp
          for file in $CHANGED_FILES; do
            # Create solution.EXT in temp directory
            ext="${file##*.}"
            cp "$file" "temp/solution.$ext"
            # Also create a link in working directory for direct inclusion
            cp "$file" "solution.$ext"
          done
          
          # Run C tests
          if [[ "$LANGUAGES" == *"C"* ]] && [ -f tests/test.c ]; then
            echo "Running C tests..."
            gcc tests/test.c -o test_c
            ./test_c > test_results/c_output.txt || echo "C tests failed" >> test_results/c_output.txt
          fi
          
          # Run C++ tests
          if [[ "$LANGUAGES" == *"C++"* ]] && [ -f tests/test.cpp ]; then
            echo "Running C++ tests..."
            g++ -std=c++17 tests/test.cpp -o test_cpp
            ./test_cpp > test_results/cpp_output.txt || echo "C++ tests failed" >> test_results/cpp_output.txt
          fi
          
          # Run Python tests
          if [[ "$LANGUAGES" == *"Python"* ]] && [ -f tests/test.py ]; then
            echo "Running Python tests..."
            cp temp/solution.py . 2>/dev/null || true
            PYTHONPATH=.:solutions python3 tests/test.py > test_results/python_output.txt || echo "Python tests failed" >> test_results/python_output.txt
          fi
          
          # Run Java tests
          if [[ "$LANGUAGES" == *"Java"* ]] && [ -f tests/Test.java ]; then
            echo "Running Java tests..."
            mkdir -p out
            cp temp/solution.java Solution.java 2>/dev/null || true
            javac -d out tests/Test.java Solution.java
            java -cp out tests.Test > test_results/java_output.txt || echo "Java tests failed" >> test_results/java_output.txt
          fi
          
          # Display all test results
          cat test_results/*.txt || echo "No test results found"

      - name: Upload Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: test_results/