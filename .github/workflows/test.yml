name: Run DSA Problem Tests

on:
  push:
    paths:
      - 'problems/*/solutions/**'
      - 'problems/*/tests/**'
  pull_request:
    paths:
      - 'problems/*/solutions/**'
      - 'problems/*/tests/**'

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc g++ build-essential make python3 python3-pip

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
          
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
      
      - name: Debug Changed Files
        run: |
          echo "Checking for changes in 'problems/*/solutions/**' and 'problems/*/tests/**' paths..."
          
          if [ "${{ github.event_name }}" == "push" ]; then
            # Show changed files in the push event
            CHANGED_FILES=$(git diff --name-only HEAD^ HEAD | grep -E '^problems/.*/solutions/|^problems/.*/tests/')
          elif [ "${{ github.event_name }}" == "pull_request" ]; then
            # Show changed files in a PR event
            git fetch origin ${{ github.base_ref }} --depth=1
            CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }} HEAD | grep -E '^problems/.*/solutions/|^problems/.*/tests/')
          else
            # For other cases, simply find all solution/test files
            CHANGED_FILES=$(find problems -path "*/solutions/*" -type f -o -path "*/tests/*" -type f)
          fi
          
          echo "Changed files detected: $CHANGED_FILES"
          if [ -z "$CHANGED_FILES" ]; then
            echo "No relevant changes detected. Exiting."
            exit 0
          fi
          
      - name: Run Tests for Changed Files
        run: |
          # Process each changed file and run corresponding tests
          for FILE in $CHANGED_FILES; do
            PROBLEM=$(echo $FILE | cut -d'/' -f2)
            echo "Processing: $FILE for problem: $PROBLEM"
            
            if [[ "$FILE" == *.py ]]; then
              echo "Running Python tests for $PROBLEM"
              cd problems/$PROBLEM
              python3 -m unittest discover -s tests -p 'test_*.py'
              cd ../..
            elif [[ "$FILE" == *.c ]]; then
              echo "Running C tests for $PROBLEM"
              cd problems/$PROBLEM
              SOLUTION_FILE=$(find solutions -name "*.c" | head -n 1)
              TEST_FILE=$(find tests -name "*.c" | head -n 1)
              gcc -Wall -I./solutions -I./tests "$SOLUTION_FILE" "$TEST_FILE" -o c_test && ./c_test
              cd ../..
            elif [[ "$FILE" == *.cpp ]]; then
              echo "Running C++ tests for $PROBLEM"
              cd problems/$PROBLEM
              SOLUTION_FILE=$(find solutions -name "*.cpp" | head -n 1)
              TEST_FILE=$(find tests -name "*.cpp" | head -n 1)
              g++ -Wall -I./solutions -I./tests "$SOLUTION_FILE" "$TEST_FILE" -o cpp_test && ./cpp_test
              cd ../..
            elif [[ "$FILE" == *.java ]]; then
              echo "Running Java tests for $PROBLEM"
              cd problems/$PROBLEM
              SOLUTION_FILES=$(find solutions -name "*.java")
              TEST_FILES=$(find tests -name "*.java")
              javac -d . $SOLUTION_FILES $TEST_FILES
              TEST_CLASS=$(grep -l "public static void main" $TEST_FILES | head -n 1)
              TEST_CLASS_NAME=$(basename "$TEST_CLASS" .java)
              java tests.$TEST_CLASS_NAME
              cd ../..
            fi
          done
