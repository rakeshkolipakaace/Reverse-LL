# name: DSA Solution Tester

# on:
#   push:
#     paths:
#       - "solutions/**"
#       - "tests/**"
#   pull_request:
#     paths:
#       - "solutions/**"
#       - "tests/**"

# jobs:
#   run-tests:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout Repository
#         uses: actions/checkout@v4
#         with:
#           fetch-depth: 2

#       - name: Find Changed Solution Files
#         id: changed-files
#         run: |
#           # Get all modified/added solution files
#           SOLUTIONS=$(git diff --name-only ${{ github.event.before || 'HEAD~1' }} HEAD | grep '^solutions/')
#           echo "solutions=$SOLUTIONS" >> $GITHUB_OUTPUT
#           echo "Detected solution files: $SOLUTIONS"

#       - name: Verify Implementations
#         run: |
#           for file in ${{ steps.changed-files.outputs.solutions }}; do
#             echo "Checking implementation in $file"
#             if [ ! -s "$file" ]; then
#               echo "::error::Empty solution file: $file"
#               exit 1
#             fi
#             # Generic check for non-comment lines
#             if ! grep -qE '^\s*[^/]' "$file"; then
#               echo "::error::No implementation found in $file"
#               exit 1
#             fi
#           done

#       - name: Detect Language
#         id: detect-language
#         run: |
#           for file in ${{ steps.changed-files.outputs.solutions }}; do
#             case "$file" in
#               *.c) echo "C" >> languages.txt ;;
#               *.cpp) echo "C++" >> languages.txt ;;
#               *.py) echo "Python" >> languages.txt ;;
#               *.java) echo "Java" >> languages.txt ;;
#             esac
#           done
#           LANGUAGES=$(sort -u languages.txt | tr '\n' ' ')
#           echo "languages=$LANGUAGES" >> $GITHUB_OUTPUT
#           echo "Detected languages: $LANGUAGES"

#       - name: Setup Environments
#         run: |
#           sudo apt update
#           echo "${{ steps.detect-language.outputs.languages }}" | grep -q "C" && sudo apt install -y gcc
#           echo "${{ steps.detect-language.outputs.languages }}" | grep -q "C++" && sudo apt install -y g++
#           echo "${{ steps.detect-language.outputs.languages }}" | grep -q "Python" && sudo apt install -y python3
#           echo "${{ steps.detect-language.outputs.languages }}" | grep -q "Java" && sudo apt install -y openjdk-17-jdk-headless

#       - name: Run Tests
#         run: |
#           for lang in ${{ steps.detect-language.outputs.languages }}; do
#             echo "Processing $lang tests..."
#             case "$lang" in
#               C)
#                 gcc solutions/*.c tests/*.c -o test_runner
#                 ./test_runner || echo "C tests failed"
#                 ;;
#               C++)
#                 g++ -std=c++17 solutions/*.cpp tests/*.cpp -o test_runner
#                 ./test_runner || echo "C++ tests failed"
#                 ;;
#               Python)
#                 python3 -m pytest tests/test_*.py -v || echo "Python tests failed"
#                 ;;
#               Java)
#                 javac solutions/*.java tests/*.java -d out
#                 java -cp out TestRunner || echo "Java tests failed"
#                 ;;
#             esac
#           done






# name: C Solution Tester

# on:
#   push:
#     paths:
#       - "solutions/solution.c"
#       - "tests/test.c"

# jobs:
#   run-c-tests:
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v4

#       - name: Install gcc
#         run: sudo apt-get update && sudo apt-get install -y gcc

#       - name: Compile and run tests
#         run: |
#           cd "$GITHUB_WORKSPACE"
#           # Compile as single translation unit
#           gcc tests/test.c -o testrunner
#           ./testrunner




name: Multi-Language Solution Tester

on:
  push:
    paths:
      - "solutions/**"
      - "tests/**"
      - ".github/workflows/test.yml"

jobs:
  check-changed-files:
    name: Check Changed Files
    runs-on: ubuntu-latest
    outputs:
      c_changed: ${{ steps.set-outputs.outputs.c_changed }}
      cpp_changed: ${{ steps.set-outputs.outputs.cpp_changed }}
      java_changed: ${{ steps.set-outputs.outputs.java_changed }}
      python_changed: ${{ steps.set-outputs.outputs.python_changed }}
    steps:
      - uses: actions/checkout@v4
      - name: Check changed files
        id: changed-files
        uses: tj-actions/changed-files@v45
        with:
          files: |
            solutions/**/*.c
            tests/**/*.c
            solutions/**/*.cpp
            tests/**/*.cpp
            solutions/**/*.java
            tests/**/*.java
            solutions/**/*.py
            tests/**/*.py
          json: true
      - name: Debug changed files
        run: |
          echo "Changed files: ${{ steps.changed-files.outputs.all_changed_files }}"
      - name: Set outputs for each language
        id: set-outputs
        run: |
          echo "c_changed=$(echo '${{ steps.changed-files.outputs.all_changed_files }}' | jq -r 'any(. | endswith(".c"); .)') " >> $GITHUB_OUTPUT
          echo "cpp_changed=$(echo '${{ steps.changed-files.outputs.all_changed_files }}' | jq -r 'any(. | endswith(".cpp"); .)') " >> $GITHUB_OUTPUT
          echo "java_changed=$(echo '${{ steps.changed-files.outputs.all_changed_files }}' | jq -r 'any(. | endswith(".java"); .)') " >> $GITHUB_OUTPUT
          echo "python_changed=$(echo '${{ steps.changed-files.outputs.all_changed_files }}' | jq -r 'any(. | endswith(".py"); .)') " >> $GITHUB_OUTPUT

  test-c:
    name: Run C Tests
    needs: check-changed-files
    runs-on: ubuntu-latest
    if: needs.check-changed-files.outputs.c_changed == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Install gcc
        run: sudo apt-get update && sudo apt-get install -y gcc
      - name: Compile and run C tests
        run: |
          gcc tests/test.c -o c_testrunner
          ./c_testrunner

  test-cpp:
    name: Run C++ Tests
    needs: check-changed-files
    runs-on: ubuntu-latest
    if: needs.check-changed-files.outputs.cpp_changed == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Install g++
        run: sudo apt-get update && sudo apt-get install -y g++
      - name: Compile and run C++ tests
        run: |
          g++ tests/test.cpp -o cpp_testrunner
          ./cpp_testrunner

  test-java:
    name: Run Java Tests
    needs: check-changed-files
    runs-on: ubuntu-latest
    if: needs.check-changed-files.outputs.java_changed == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Compile and run Java tests
        run: |
          javac -d . solutions/Solution.java tests/Test.java
          java tests.Test

  test-python:
    name: Run Python Tests
    needs: check-changed-files
    runs-on: ubuntu-latest
    if: needs.check-changed-files.outputs.python_changed == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Run Python tests
        run: |
          python3 tests/test.py