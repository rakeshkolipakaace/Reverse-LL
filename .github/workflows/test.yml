# name: DSA Solution Tester

# on:
#   push:
#     paths:
#       - "solutions/**"
#       - "tests/**"
#   pull_request:
#     paths:
#       - "solutions/**"
#       - "tests/**"

# jobs:
#   run-tests:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout Repository
#         uses: actions/checkout@v4
#         with:
#           fetch-depth: 2

#       - name: Find Changed Solution Files
#         id: changed-files
#         run: |
#           # Get all modified/added solution files
#           SOLUTIONS=$(git diff --name-only ${{ github.event.before || 'HEAD~1' }} HEAD | grep '^solutions/')
#           echo "solutions=$SOLUTIONS" >> $GITHUB_OUTPUT
#           echo "Detected solution files: $SOLUTIONS"

#       - name: Verify Implementations
#         run: |
#           for file in ${{ steps.changed-files.outputs.solutions }}; do
#             echo "Checking implementation in $file"
#             if [ ! -s "$file" ]; then
#               echo "::error::Empty solution file: $file"
#               exit 1
#             fi
#             # Generic check for non-comment lines
#             if ! grep -qE '^\s*[^/]' "$file"; then
#               echo "::error::No implementation found in $file"
#               exit 1
#             fi
#           done

#       - name: Detect Language
#         id: detect-language
#         run: |
#           for file in ${{ steps.changed-files.outputs.solutions }}; do
#             case "$file" in
#               *.c) echo "C" >> languages.txt ;;
#               *.cpp) echo "C++" >> languages.txt ;;
#               *.py) echo "Python" >> languages.txt ;;
#               *.java) echo "Java" >> languages.txt ;;
#             esac
#           done
#           LANGUAGES=$(sort -u languages.txt | tr '\n' ' ')
#           echo "languages=$LANGUAGES" >> $GITHUB_OUTPUT
#           echo "Detected languages: $LANGUAGES"

#       - name: Setup Environments
#         run: |
#           sudo apt update
#           echo "${{ steps.detect-language.outputs.languages }}" | grep -q "C" && sudo apt install -y gcc
#           echo "${{ steps.detect-language.outputs.languages }}" | grep -q "C++" && sudo apt install -y g++
#           echo "${{ steps.detect-language.outputs.languages }}" | grep -q "Python" && sudo apt install -y python3
#           echo "${{ steps.detect-language.outputs.languages }}" | grep -q "Java" && sudo apt install -y openjdk-17-jdk-headless

#       - name: Run Tests
#         run: |
#           for lang in ${{ steps.detect-language.outputs.languages }}; do
#             echo "Processing $lang tests..."
#             case "$lang" in
#               C)
#                 gcc solutions/*.c tests/*.c -o test_runner
#                 ./test_runner || echo "C tests failed"
#                 ;;
#               C++)
#                 g++ -std=c++17 solutions/*.cpp tests/*.cpp -o test_runner
#                 ./test_runner || echo "C++ tests failed"
#                 ;;
#               Python)
#                 python3 -m pytest tests/test_*.py -v || echo "Python tests failed"
#                 ;;
#               Java)
#                 javac solutions/*.java tests/*.java -d out
#                 java -cp out TestRunner || echo "Java tests failed"
#                 ;;
#             esac
#           done






# name: C Solution Tester

# on:
#   push:
#     paths:
#       - "solutions/solution.c"
#       - "tests/test.c"

# jobs:
#   run-c-tests:
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v4

#       - name: Install gcc
#         run: sudo apt-get update && sudo apt-get install -y gcc

#       - name: Compile and run tests
#         run: |
#           cd "$GITHUB_WORKSPACE"
#           # Compile as single translation unit
#           gcc tests/test.c -o testrunner
#           ./testrunner






name: DSA Solution Tester

on:
  push:
    paths:
      - "solutions/solution.c"
      - "solutions/solution.cpp"
      - "solutions/Solution.java"
      - "solutions/solution.py"
      - "tests/test.c"
      - "tests/test.cpp"
      - "tests/Test.java"
      - "tests/test_solution.py"

jobs:
  run-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        language: ['c', 'cpp', 'java', 'python']
    steps:
      - uses: actions/checkout@v4

      - name: Detect changes
        id: detect-changes
        run: |
          CHANGED_FILES=$(git diff --name-only ${{ github.event.before || 'HEAD~1' }} HEAD)
          echo "C_CHANGED=$([[ "$CHANGED_FILES" == *"solution.c"* || "$CHANGED_FILES" == *"test.c"* ]] && echo "true" || echo "false")" >> $GITHUB_OUTPUT
          echo "CPP_CHANGED=$([[ "$CHANGED_FILES" == *"solution.cpp"* || "$CHANGED_FILES" == *"test.cpp"* ]] && echo "true" || echo "false")" >> $GITHUB_OUTPUT
          echo "JAVA_CHANGED=$([[ "$CHANGED_FILES" == *"Solution.java"* || "$CHANGED_FILES" == *"Test.java"* ]] && echo "true" || echo "false")" >> $GITHUB_OUTPUT
          echo "PYTHON_CHANGED=$([[ "$CHANGED_FILES" == *"solution.py"* || "$CHANGED_FILES" == *"test_solution.py"* ]] && echo "true" || echo "false")" >> $GITHUB_OUTPUT

      - name: Set up C
        if: matrix.language == 'c' && steps.detect-changes.outputs.C_CHANGED == 'true'
        run: sudo apt-get update && sudo apt-get install -y gcc

      - name: Set up C++
        if: matrix.language == 'cpp' && steps.detect-changes.outputs.CPP_CHANGED == 'true'
        run: sudo apt-get update && sudo apt-get install -y g++

      - name: Set up Java
        if: matrix.language == 'java' && steps.detect-changes.outputs.JAVA_CHANGED == 'true'
        run: sudo apt-get update && sudo apt-get install -y openjdk-17-jdk

      - name: Set up Python
        if: matrix.language == 'python' && steps.detect-changes.outputs.PYTHON_CHANGED == 'true'
        run: sudo apt-get update && sudo apt-get install -y python3 python3-pip

      - name: Run C tests
        if: matrix.language == 'c' && steps.detect-changes.outputs.C_CHANGED == 'true'
        run: |
          cd "$GITHUB_WORKSPACE"
          gcc tests/test.c -o testrunner
          ./testrunner

      - name: Run C++ tests
        if: matrix.language == 'cpp' && steps.detect-changes.outputs.CPP_CHANGED == 'true'
        run: |
          cd "$GITHUB_WORKSPACE"
          g++ tests/test.cpp solutions/solution.cpp -o testrunner
          ./testrunner

      - name: Run Java tests
        if: matrix.language == 'java' && steps.detect-changes.outputs.JAVA_CHANGED == 'true'
        run: |
          cd "$GITHUB_WORKSPACE"
          javac solutions/Solution.java tests/Test.java
          java -cp solutions:tests Test

      - name: Run Python tests
        if: matrix.language == 'python' && steps.detect-changes.outputs.PYTHON_CHANGED == 'true'
        run: |
          cd "$GITHUB_WORKSPACE"
          pip install pytest
          python -m pytest tests/test_solution.py -v