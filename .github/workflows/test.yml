name: Run DSA Problem Tests

on:
  push:
    paths:
      - 'solutions/**'
      - 'tests/**'
  pull_request:
    paths:
      - 'solutions/**'
      - 'tests/**'

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install GCC (if not available)
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc

      - name: Detect changed solution file and valid code
        id: detect
        run: |
          set -e
          changed_file=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep '^solutions/' || true)

          echo "Changed file: $changed_file"

          lang=""
          valid_code=false

          for file in $changed_file; do
            echo "Processing file: $file"  # Debugging line
            case "$file" in
              solutions/solution.py)
                lang="python"
                code=$(grep -vE '^\s*($|#)' $file | tr -d '[:space:]')
                if [[ "$code" != "" && ! "$code" =~ ^(return.*|pass)$ ]]; then valid_code=true; fi
                ;;
              solutions/solution.c)
                lang="c"
                code=$(grep -vE '^\s*($|//|/\*|\*)' $file | tr -d '[:space:]')
                if [[ "$code" != "" && ! "$code" =~ ^(return[0-9a-zA-Z_]*;?)$ ]]; then valid_code=true; fi
                ;;
              solutions/solution.cpp)
                lang="cpp"
                code=$(grep -vE '^\s*($|//|/\*|\*)' $file | tr -d '[:space:]')
                if [[ "$code" != "" && ! "$code" =~ ^(return[0-9a-zA-Z_]*;?)$ ]]; then valid_code=true; fi
                ;;
              solutions/Solution.java)
                lang="java"
                code=$(grep -vE '^\s*($|//|/\*|\*|\*)' $file | tr -d '[:space:]')
                if [[ "$code" != "" && ! "$code" =~ ^(return.*;?)$ ]]; then valid_code=true; fi
                ;;
            esac
          done

          echo "lang=$lang" >> $GITHUB_OUTPUT
          echo "valid_code=$valid_code" >> $GITHUB_OUTPUT

      - name: Setup Python
        if: steps.detect.outputs.lang == 'python' && steps.detect.outputs.valid_code == 'true'
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Run Python Tests
        if: steps.detect.outputs.lang == 'python' && steps.detect.outputs.valid_code == 'true'
        run: |
          python3 -m unittest discover -s tests -p 'test_*.py'

      - name: Run C Tests
        if: steps.detect.outputs.lang == 'c' && steps.detect.outputs.valid_code == 'true'
        run: |
          echo "Detected C solution. Compiling and running C tests..."
          gcc solutions/solution.c tests/test.c -o c_test
          if [ $? -eq 0 ]; then
            echo "Compilation successful. Running the tests..."
            ./c_test || echo "Test execution failed!"  # Added error handling
          else
            echo "Compilation failed!"
            exit 1
          fi

      - name: Run C++ Tests
        if: steps.detect.outputs.lang == 'cpp' && steps.detect.outputs.valid_code == 'true'
        run: |
          g++ solutions/solution.cpp tests/test.cpp -o cpp_test && ./cpp_test

      - name: Setup Java
        if: steps.detect.outputs.lang == 'java' && steps.detect.outputs.valid_code == 'true'
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Run Java Tests
        if: steps.detect.outputs.lang == 'java' && steps.detect.outputs.valid_code == 'true'
        run: |
          javac solutions/Solution.java tests/Test.java
          java -cp . tests.Test
